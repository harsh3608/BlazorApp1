@* @page "/login"
@inject NavigationManager navigationManager

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card border-3 border-dark rounded p-3 d-flex align-items-center" style="width:700px; margin-left:20%">
        <div class="form-group" style="width:500px;">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        </div>

        <div class="form-group m-2" style="width:500px;">
            <label for="password">Password:</label>
            <div class="input-group">
                <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="@GetInputType()" />
                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                    <i class="@GetEyeIconClass()"></i>
                </button>
            </div>
        </div>

        <div class="d-flex flex-row justify-content-center m-4">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </div>
</EditForm>


@code {
    private LoginModel loginModel = new LoginModel();
    private Boolean showPassword = false;

    private async Task HandleValidSubmit()
    {
        // Call your authentication service to perform login
        // bool isAuthenticated = await authService.LoginAsync(loginModel);

        // if (isAuthenticated)
        // {
        //     // Redirect to a different page upon successful login
        //     navigationManager.NavigateTo("/profile");
        // }
        // else
        // {
        //     // Handle authentication failure (show error message, etc.)
        //     // For simplicity, just reset the password field in this example
        //     loginModel.Password = string.Empty;
        // }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private string GetInputType()
    {
        return showPassword ? "text" : "password";
    }

    private string GetEyeIconClass()
    {
        return showPassword ? "bi bi-eye-slash-fill" : "bi bi-eye-fill";
    }

    private class LoginModel
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
}
 *@


@page "/login"
@* @inject AuthService authService *@
@inject NavigationManager navigationManager

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card border-3 border-dark rounded p-3 d-flex align-items-center" style="width:700px; margin-left:20%">
        <div class="form-group" style="width:500px;">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        </div>

        <div class="form-group m-2" style="width:500px;">
            <label for="password">Password:</label>
            @if (showPassword)
            {
                <div class="input-group">
                    <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="text" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <i class="bi bi-eye-slash-fill"></i>
                    </button>
                </div>
            }
            else
            {
                <div class="input-group">
                    <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        <i class="bi bi-eye-fill"></i>
                    </button>
                </div>
            }




        </div>

        <div class="d-flex flex-row justify-content-center m-4">
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </div>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private Boolean showPassword = false;

    private async Task HandleValidSubmit()
    {
        // Call your authentication service to perform login
        // bool isAuthenticated = await authService.LoginAsync(loginModel);

        // if (isAuthenticated)
        // {
        //     // Redirect to a different page upon successful login
        //     navigationManager.NavigateTo("/profile");
        // }
        // else
        // {
        //     // Handle authentication failure (show error message, etc.)
        //     // For simplicity, just reset the password field in this example
        //     loginModel.Password = string.Empty;
        // }
    }

    public void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    // private string GetInputType()
    // {
    //     return showPassword ? "text" : "password";
    // }

    // private string GetEyeIconClass()
    // {
    //     return showPassword ? "bi bi-eye-slash-fill" : "bi bi-eye-fill";
    // }

    private class LoginModel
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
}
